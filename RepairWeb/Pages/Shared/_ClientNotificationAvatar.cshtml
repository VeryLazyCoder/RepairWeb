@using Microsoft.AspNetCore.Identity
@using RepairWeb.Data.Services
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NotificationService NotificationService

@{
    var user = await UserManager.GetUserAsync(User);
    var profileImageUrl = string.IsNullOrEmpty(user?.ProfileImageURL) ? "/images/defaultUser.png" : user?.ProfileImageURL;

    var unreadNotifications = await NotificationService.GetNotifications(user.Id);
    var unreadNotificationsCount = unreadNotifications.Count;

    <div class="dropdown">
        <div class="d-flex align-items-center position-right" data-bs-toggle="dropdown" aria-expanded="false" style="cursor: pointer;">
            <img src="@profileImageUrl" alt="Profile Image"
                 class="rounded-circle" style="width: 40px; height: 40px; margin-right: 10px;" />

            @if (unreadNotificationsCount > 0)
            {
                <span class="badge bg-danger position-absolute top-0 start-100 translate-middle p-1 rounded-circle">
                    @unreadNotificationsCount
                </span>
            }
        </div>

        <ul class="dropdown-menu dropdown-menu-end" style="max-width: 800px; padding: 15px; max-height: 50vh; overflow-y: auto;">
            @if (unreadNotificationsCount == 0)
            {
                <li><span class="dropdown-item text-center">У вас нет новых уведомлений</span></li>
            }
            else
            {
                @foreach (var notification in unreadNotifications)
                {
                    <li class="notification-item d-flex justify-content-between align-items-center p-3 mb-2" id="notification-@notification.Id"
                        style="background-color: #f0f8ff; border-radius: 8px; border: 2px solid #007bff;">
                        <div class="d-flex flex-column" style="width: 80%;">
                            <span class="dropdown-item-text" style="font-size: 14px;">
                                <strong>Оборудование:</strong> @notification.Equipment
                            </span>
                            <span class="dropdown-item-text" style="font-size: 14px;">
                                <strong>Статус:</strong> @notification.Status
                            </span>
                            <span class="dropdown-item-text" style="font-size: 14px;">
                                <strong>Комментарий:</strong> @notification.Comment
                            </span>
                            <span class="dropdown-item-text text-muted" style="font-size: 12px;">
                                @notification.Created
                            </span>
                        </div>
                        <button class="btn btn-sm btn-success mark-as-read" data-id="@notification.Id" style="font-size: 12px;">
                            Отметить прочитанным
                        </button>
                    </li>
                }
            }
        </ul>
    </div>
}


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const markAsReadButtons = document.querySelectorAll('.mark-as-read');

        const notificationBadge = document.querySelector('.badge.bg-danger');
        let unreadNotificationsCount = @unreadNotificationsCount;

        markAsReadButtons.forEach(button => {
            button.addEventListener('click', function () {
                const notificationId = this.getAttribute('data-id');

                // Отправляем запрос к API для отметки уведомления как прочитанного
                fetch(`/api/Notification/MarkAsRead/${notificationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            const notificationItem = document.getElementById(`notification-${notificationId}`);
                            if (notificationItem) {
                                notificationItem.remove();
                            }
                            unreadNotificationsCount--;

                            if (unreadNotificationsCount <= 0 && notificationBadge) {
                                notificationBadge.remove();
                            } else {
                                if (notificationBadge) {
                                    notificationBadge.textContent = unreadNotificationsCount;
                                }
                            }
                        } else {
                            console.error('Ошибка при отметке уведомления как прочитанного');
                        }
                    })
                    .catch(error => console.error('Ошибка запроса:', error));
            });
        });
    });
</script>

